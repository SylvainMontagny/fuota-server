[
    {
        "id": "b3733736db06bf09",
        "type": "tab",
        "label": "Multicast dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7fbe5c3a9ce0d312",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "McAddr (big endian, to set in NS side)",
        "format": "{{msg.McAddrBE}}",
        "layout": "row-spread",
        "className": "",
        "x": 1310,
        "y": 140,
        "wires": []
    },
    {
        "id": "9478f3ec4eb613e4",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "McAddr (little endian, to set in command)",
        "format": "{{msg.McAddrLE}}",
        "layout": "row-spread",
        "className": "",
        "x": 1320,
        "y": 180,
        "wires": []
    },
    {
        "id": "f550a874eb91994d",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "McKey_encrypted",
        "format": "{{msg.McKey_ENC}}",
        "layout": "row-spread",
        "className": "",
        "x": 1250,
        "y": 220,
        "wires": []
    },
    {
        "id": "6714b4df274dfb50",
        "type": "function",
        "z": "b3733736db06bf09",
        "name": "Key derivation",
        "func": "/*\n* Title:    McKey_encrypted generator + McAddr_Generator\n* Autor:    Antoine AUGAGNEUR\n* Date:     march, 2022\n* Sources:  > randHex function from https://codepen.io/code_monk/pen/kaWvPL\n*\n*/\n\n//  random hex string generator\nvar randHex = function(len) {\n  var maxlen = 8,\n      min = Math.pow(16,Math.min(len,maxlen)-1) \n      max = Math.pow(16,Math.min(len,maxlen)) - 1,\n      n   = Math.floor( Math.random() * (max-min+1) ) + min,\n      r   = n.toString(16);\n  while ( r.length < len ) {\n     r = r + randHex( len - maxlen );\n  }\n  return r;\n};\n\n// randomly generated bigendian McKey_encrypted\nvar McKey_encrypted  = randHex(32);\n\n// randomly generated bigendian McAddr\nvar McAddr_be = randHex(8);\n\n// McAddr little endian conversion\nvar McAddr_le = McAddr_be[6]                            \n                    + McAddr_be[7]\n                    + McAddr_be[4]\n                    + McAddr_be[5]\n                    + McAddr_be[2]\n                    + McAddr_be[3]\n                    + McAddr_be[0]\n                    + McAddr_be[1];\n                    \n// ###############################################################################################################################################################\n\n/*\n* Title:    Keys derivation for LoRaWAN multicast session\n* Autor:    Antoine AUGAGNEUR\n* Date:     march, 2022\n* Sources:  > LoRaWAN Remote Multicast Setup Specification v1.0.0 (Lora Alliance)\n*           > Deciphering an EU868 LoRaWAN 1.0 OTAA Join Accept [online], available on:\n*             https://runkit.com/avbentem/deciphering-a-lorawan-otaa-join-accept           \n* \n* ## Definitions\n* Device has:   GenAppKey               ( = AppKey, according to LoRaWAN 1.1)\n* It receives:  McKey_encrypted         ( via McGroupSetupReq MAC command)\n*               McAddr                  ( via McGroupSetupReq MAC command)\n* Then,\n* McRootKey = aes128_encrypt(GenAppKey, 0x00 | pad16)\n* McKEKey = aes128_encrypt(McRootKey, 0x00 | pad16)\n* McKey = aes128_decrypt(McKey_encrypted,McKEKey)\n* And then,\n* McAppSKey = aes128_encrypt(McKey, 0x01 | McAddr | pad16)\n* McNetSKey = aes128_encrypt(McKey, 0x02 | McAddr | pad16)\n*\n* To be noted:\n* The octet order over the air for all multi-octet fields is little endian (Least significant byte is \n* sent first). As a consequence, send data used for crypto operations are in little endian too.\n* Howerver, logs device diplay them correctly.\n*\n*\n* Information:\n*           - inputs:   GenAppKey           (from node)                    \n*                       McAddr              (from node, it has to be in little endian)   \n*                       McKey_encrypted     (from node)\n*           - outputs:  McRootKey\n*                       McKEKey\n*                       McKey\n*                       McAppSKey         \n*                       McNetSKey         \n*                       \n*\n*/\n\n// Initialization vector is always zero\nvar LORA_IV = CryptoJS.enc.Hex.parse('00000000000000000000000000000000');\n\n// Encrypts the given buffer, returning another buffer.\nfunction encrypt(buffer, key) {\n    var ciphertext = CryptoJS.AES.encrypt(\n        CryptoJS.lib.WordArray.create(buffer),\n        CryptoJS.lib.WordArray.create(key),\n        {\n            mode: CryptoJS.mode.ECB,\n            iv: LORA_IV,\n            padding: CryptoJS.pad.NoPadding\n        }\n    ).ciphertext.toString(CryptoJS.enc.Hex);\n    return new Buffer(ciphertext, 'hex');\n}\n\n// ## Known data (set or generated) #########################################\n// GenAppKey (or AppKey) programmed in the device\n// var GenAppKey = 'F255B7748A00FF7C22344C3402F6356F';\nvar GenAppKey = msg.payload;\nGenAppKey = Buffer.from(GenAppKey.toString(16), 'hex');\n\n// McKey_encrypted\n// var McKey_encrypted = '6B46B8386CB3B7697B2674526E98209B';\nMcKey_encrypted = Buffer.from(McKey_encrypted.toString(16), 'hex');\n\n// McAdrr\n// var McAddr = 'F03D292B';\nMcAddr_le = Buffer.from(McAddr_le.toString(16), 'hex'); // normal address:F03D2928 --> little endian:28293DF0\n                                             \n// ## Key derivation to have McRootKey ######################################\n// McRootKey = aes128_encrypt(GenAppKey, 0x00 | pad16)\nvar sKey_root = Buffer.from('000000000000000000000000000000', 'hex');\nvar McRootKey = encrypt(Buffer.concat([Buffer.from('00','hex'),sKey_root]),GenAppKey);\n\n// ## Key derivation to have McKEKey\n// McKEKey = aes128_encrypt(McRootKey, 0x00 | pad16)\nvar sKey_ke = Buffer.from('000000000000000000000000000000', 'hex');\nvar McKEKey = encrypt(Buffer.concat([Buffer.from('00','hex'),sKey_ke]),McRootKey);\n\n// ## Key decryption to have McKey ##########################################\n// McKey = aes128_decrypt(McKey_encrypted,McKEKey)\nvar McKey = encrypt(McKey_encrypted,McKEKey);\n\n\n// ## Key derivation to have McAppsKey and McNetSKey ########################\n// McAppSKey = aes128_encrypt(McKey, 0x01 | McAddr | pad16)\nvar sKey_apps = Buffer.concat([\n                        McAddr_le,\n                        Buffer.from('00000000000000000000000', 'hex')\n                        ]);\nvar McAppSKey = encrypt(Buffer.concat([Buffer.from('01','hex'),sKey_apps]),McKey);\n\n// McNetSKey = aes128_encrypt(McKey, 0x02 | McAddr | pad16)\nvar sKey_nets = Buffer.concat([\n                        McAddr_le,\n                        Buffer.from('00000000000000000000000', 'hex')\n                        ]);\nvar McNetSKey = encrypt(Buffer.concat([Buffer.from('02','hex'),sKey_nets]),McKey);\n\n\n\n// output\n\nif (msg.payload.length == 32){\n    \n    msg.McAddrLE=McAddr_le.toString('hex');                // McAddr little endian\n    msg.McAddrBE=McAddr_be;                             // McAddr big endian\n    msg.McKey_ENC=McKey_encrypted.toString('hex');         // McKey_encrypted\n    msg.McRootKEY=McRootKey.toString('hex');               // McRootKey\n    msg.McKEKEY=McKEKey.toString('hex');                   // McKEKey\n    msg.McKEY=McKey.toString('hex');                   // McKey\n    msg.McAppSKEY=McAppSKey.toString('hex');               // McAppSKey\n    msg.McNetSKEY=McNetSKey.toString('hex');               // McNetSKey\n    \n    msg.state = \"1\";\n    \n    return msg;\n}\nelse\n{\n    msg.McAddrLE=McAddr_le.toString('hex');                // McAddr little endian\n    msg.McAddrBE=McAddr_be.toString('hex');                             // McAddr big endian\n    msg.McKey_ENC=McKey_encrypted.toString('hex');         // McKey_encrypted\n    msg.McRootKEY=\"Error. Check the GenAppKey length\";                              // McRootKey\n    msg.McKEKEY=\"Error. Check the GenAppKey length\";                                // McKEKey\n    msg.McKEY=\"Error. Check the GenAppKey length\";                   // McKey\n    msg.McAppSKEY=\"Error. Check the GenAppKey length\";                              // McAppSKey\n    msg.McNetSKEY=\"Error. Check the GenAppKey length\";                              // McNetSKey\n    msg.state = \"0\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "reverse",
                "module": "buffer-reverse"
            },
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            },
            {
                "var": "nodeAesCmac",
                "module": "node-aes-cmac"
            }
        ],
        "x": 980,
        "y": 140,
        "wires": [
            [
                "79ebcb11d9d542cc",
                "7fbe5c3a9ce0d312",
                "9478f3ec4eb613e4",
                "f550a874eb91994d",
                "280c8073fa00bb80",
                "85db35f79b2e2f14",
                "9e876f4e13076d01",
                "17b020efe49f4899",
                "0bc5258602328aaf",
                "361ecef1011a6a88"
            ]
        ]
    },
    {
        "id": "79ebcb11d9d542cc",
        "type": "debug",
        "z": "b3733736db06bf09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 100,
        "wires": []
    },
    {
        "id": "280c8073fa00bb80",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "McRootKey",
        "format": "{{msg.McRootKEY}}",
        "layout": "row-spread",
        "className": "",
        "x": 1230,
        "y": 260,
        "wires": []
    },
    {
        "id": "b95b3e0afcbea571",
        "type": "inject",
        "z": "b3733736db06bf09",
        "name": "Init, empty string",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "f255b7748a00ff7c22344c3402f6356f",
        "payloadType": "str",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "b3022fdad8cb48c3"
            ]
        ]
    },
    {
        "id": "b3022fdad8cb48c3",
        "type": "ui_text_input",
        "z": "b3733736db06bf09",
        "name": "",
        "label": "GenAppKey",
        "tooltip": "",
        "group": "87ee573668ee2369",
        "order": 1,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": "100",
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 310,
        "y": 140,
        "wires": [
            [
                "522ee72c952a026d"
            ]
        ]
    },
    {
        "id": "b6f844a8739dd174",
        "type": "ui_button",
        "z": "b3733736db06bf09",
        "name": "",
        "group": "87ee573668ee2369",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Generate Multicast Keys",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "textInput",
        "payloadType": "flow",
        "topic": "",
        "topicType": "str",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "6714b4df274dfb50"
            ]
        ]
    },
    {
        "id": "522ee72c952a026d",
        "type": "change",
        "z": "b3733736db06bf09",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "textInput",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 140,
        "wires": [
            [
                "b6f844a8739dd174"
            ]
        ]
    },
    {
        "id": "85db35f79b2e2f14",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "McKEKey",
        "format": "{{msg.McKEKEY}}",
        "layout": "row-spread",
        "className": "",
        "x": 1220,
        "y": 300,
        "wires": []
    },
    {
        "id": "9e876f4e13076d01",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "McKey",
        "format": "{{msg.McKEY}}",
        "layout": "row-spread",
        "className": "",
        "x": 1210,
        "y": 340,
        "wires": []
    },
    {
        "id": "17b020efe49f4899",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 13,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "McAppsKey",
        "format": "{{msg.McAppSKEY}}",
        "layout": "row-spread",
        "className": "",
        "x": 1230,
        "y": 380,
        "wires": []
    },
    {
        "id": "0bc5258602328aaf",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 14,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "McNetsKey",
        "format": "{{msg.McNetSKEY}}",
        "layout": "row-spread",
        "className": "",
        "x": 1230,
        "y": 420,
        "wires": []
    },
    {
        "id": "8c46152b4ac526e7",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 390,
        "y": 300,
        "wires": []
    },
    {
        "id": "6c5349afb5820c62",
        "type": "inject",
        "z": "b3733736db06bf09",
        "name": "GENERATED KEYS ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "GENERATED KEYS --------------------------------------------------------",
        "payloadType": "str",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "8c46152b4ac526e7"
            ]
        ]
    },
    {
        "id": "5c0c30cb8f4356f8",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 390,
        "y": 340,
        "wires": []
    },
    {
        "id": "8d51ea1233ba548e",
        "type": "inject",
        "z": "b3733736db06bf09",
        "name": "DERIVED KEYS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "DERIVED KEYS ----------------------------------------------------------",
        "payloadType": "str",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "5c0c30cb8f4356f8"
            ]
        ]
    },
    {
        "id": "ec021787d813fb89",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 390,
        "y": 380,
        "wires": []
    },
    {
        "id": "1d603db70c9c9d62",
        "type": "inject",
        "z": "b3733736db06bf09",
        "name": "DECRYPTED KEYS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "DECRYPTED KEYS --------------------------------------------------------",
        "payloadType": "str",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "ec021787d813fb89"
            ]
        ]
    },
    {
        "id": "98926c865ef97e6e",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 390,
        "y": 420,
        "wires": []
    },
    {
        "id": "bf94da2ce2201ceb",
        "type": "inject",
        "z": "b3733736db06bf09",
        "name": "MULTICAST SESSION KEYS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MULTICAST SESSION KEYS ----------------------------------------------",
        "payloadType": "str",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "98926c865ef97e6e"
            ]
        ]
    },
    {
        "id": "2d35c578587c02e4",
        "type": "comment",
        "z": "b3733736db06bf09",
        "name": "For Dashboard",
        "info": "",
        "x": 120,
        "y": 260,
        "wires": []
    },
    {
        "id": "ca25bc2583617767",
        "type": "comment",
        "z": "b3733736db06bf09",
        "name": "Multicast session generator",
        "info": "",
        "x": 150,
        "y": 100,
        "wires": []
    },
    {
        "id": "0b31875545d006d9",
        "type": "comment",
        "z": "b3733736db06bf09",
        "name": "McGroupSetupReq (0x02)",
        "info": "",
        "x": 150,
        "y": 840,
        "wires": []
    },
    {
        "id": "5e4a21a77a767387",
        "type": "ui_form",
        "z": "b3733736db06bf09",
        "name": "McGroupSetupReq",
        "label": "",
        "group": "c031fbdc2f5341a9",
        "order": 1,
        "width": 11,
        "height": 1,
        "options": [
            {
                "label": "McGroupID (0 to 3)",
                "value": "McGroupID",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "McAddr",
                "value": "McAddr",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "McKey_encrypted",
                "value": "McKey_encrypted",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "minMcFCount (hex, 4 bytes)",
                "value": "minMcFCount",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "maxMcFCount (hex, 4 bytes)",
                "value": "maxMcFCount",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "McGroupID": "",
            "McAddr": "",
            "McKey_encrypted": "",
            "minMcFCount": "",
            "maxMcFCount": ""
        },
        "payload": "",
        "submit": "Create command",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "58122c82443945bf"
            ]
        ]
    },
    {
        "id": "58122c82443945bf",
        "type": "function",
        "z": "b3733736db06bf09",
        "name": "McGroupSetupReq",
        "func": "/*\n* Title:    Mc LoRaWAN command: McGroupSetupReq\n* Autor:    Antoine AUGAGNEUR\n* Date:     march, 2022\n* Sources:  > LoRaWAN Application Layer Clock Synchronization Specification v1.0.0 (Lora Alliance)\n*           > LoRaWAN Remote Multicast Setup Specification v1.0.0 (Lora Alliance)\n*\n* McGroupSetupReq payload:\n*          | McGroupIDHeader  | McAddr    | McKey_encrypted   | minMcFCount   | maxMcFCount   | \n*          | 1 byte           | 4 bytes   | 16 bytes          | 4 bytes       | 4 bytes       |\n*\n* McGroupSetupReq command CID: 0x02\n*\n* Information:\n*           - inputs:   McGroupID                    \n*                       McAddr              (from node, it has to be in little endian)    \n*                       McKey_encrypted     (from node)\n*                       minMcFCount\n*                       maxMcFCount\n*           - outputs:  McGroupSetupReq\n*                       minMcFCount (dec format)\n*                       maxMcFCount (dec format)\n*                       \n*                                          \n*/\n\n// McGroupIDHeader (1 byte) / 6-bits RFU + 2-bits McGroupID\nvar RFU = '0';\n// var McGroupID = '1'; // 0, 1, 2, or 3\nvar McGroupID = msg.payload.McGroupID;\nvar McGroupIDHeader = Buffer.from(RFU + McGroupID, 'hex');\n\n// McAddr (4 byte)\n// var McAddr = 'F03D292B';\nvar McAddr = msg.payload.McAddr;\nMcAddr = Buffer.from(McAddr, 'hex');\n\n// McKey_encrypted (16 bytes)\n// var McKey_encrypted = '6B46B8386CB3B7697B2674526E98209B';\nvar McKey_encrypted = msg.payload.McKey_encrypted;\nMcKey_encrypted = Buffer.from(McKey_encrypted, 'hex');\n\n// minMcFCount (4 bytes)\n// var minMcFCount = '00000000';\nvar minMcFCount = msg.payload.minMcFCount;\nminMcFCount = minMcFCount.toString(16);\nvar minMcFCount_le = minMcFCount[6]                             // little endian conversion\n                    + minMcFCount[7]\n                    + minMcFCount[4]\n                    + minMcFCount[5]\n                    + minMcFCount[2]\n                    + minMcFCount[3]\n                    + minMcFCount[0]\n                    + minMcFCount[1];\nminMcFCount_le = Buffer.from(minMcFCount_le, 'hex');\nvar minMcFCount_dec = parseInt(minMcFCount,16);                 // passage en decimal\n\n// maxMcFCount (4 bytes)\n// var maxMcFCount = '0000000A'\nvar maxMcFCount = msg.payload.maxMcFCount;\nmaxMcFCount = maxMcFCount.toString(16);\nvar maxMcFCount_le = maxMcFCount[6]                             // little endian conversion\n                    + maxMcFCount[7]\n                    + maxMcFCount[4]\n                    + maxMcFCount[5]\n                    + maxMcFCount[2]\n                    + maxMcFCount[3]\n                    + maxMcFCount[0]\n                    + maxMcFCount[1];\nmaxMcFCount_le = Buffer.from(maxMcFCount_le, 'hex');\nvar maxMcFCount_dec = parseInt(maxMcFCount,16);                 // passage en decimal\n\n\n// McGroupSetupReq\nvar Command_02 = Buffer.from('02', 'hex');\nvar McGroupSetupReq = Buffer.concat([\n                        Command_02,\n                        McGroupIDHeader,\n                        McAddr,\n                        McKey_encrypted,\n                        minMcFCount_le,\n                        maxMcFCount_le                        \n                        ]);\n\n// ############################################################################\n\n\n//msg.mcaddrlittle = McAddr.toString('hex');\n//msg.mckeyencrypted = McKey_encrypted.toString('hex');\nmsg.McGroupSetupReq = McGroupSetupReq.toString('hex');\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 880,
        "wires": [
            [
                "6fbb3f730d5b396e"
            ]
        ]
    },
    {
        "id": "6fbb3f730d5b396e",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "c031fbdc2f5341a9",
        "order": 2,
        "width": 11,
        "height": 1,
        "name": "",
        "label": "McGroupSetupReq command",
        "format": "{{msg.McGroupSetupReq}}",
        "layout": "col-center",
        "className": "",
        "x": 630,
        "y": 880,
        "wires": []
    },
    {
        "id": "33f52510eb03ea03",
        "type": "comment",
        "z": "b3733736db06bf09",
        "name": "McClassCSessionReq (0x04)",
        "info": "",
        "x": 160,
        "y": 980,
        "wires": []
    },
    {
        "id": "2d3ecbcd334753ef",
        "type": "ui_form",
        "z": "b3733736db06bf09",
        "name": "McClassCSessionReq ",
        "label": "",
        "group": "5ddbf59639995318",
        "order": 1,
        "width": 10,
        "height": 1,
        "options": [
            {
                "label": "McGroupID (0 to 3)",
                "value": "McGroupID",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "SessionTime (date)",
                "value": "SessionTime_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "SessionTime (time)",
                "value": "SessionTime_time",
                "type": "time",
                "required": true,
                "rows": null
            },
            {
                "label": "TimeOut (0 to 15)",
                "value": "TimeOut",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Downlink Frequency in Hz (e.g.: 869525000)",
                "value": "DLFreq",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "DataRate (e.g.: 3)",
                "value": "DR",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "McGroupID": "",
            "SessionTime_date": "",
            "SessionTime_time": "",
            "TimeOut": "",
            "DLFreq": "",
            "DR": ""
        },
        "payload": "",
        "submit": "Create command",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 140,
        "y": 1020,
        "wires": [
            [
                "38b86ffc9736bfb5"
            ]
        ]
    },
    {
        "id": "38b86ffc9736bfb5",
        "type": "function",
        "z": "b3733736db06bf09",
        "name": "McClassCSessionReq",
        "func": "/*\n* Title:    Mc LoRaWAN command: McClassCSessionReq\n* Autor:    Antoine AUGAGNEUR\n* Date:     march, 2022\n* Sources:  > LoRaWAN Application Layer Clock Synchronization Specification v1.0.0 (Lora Alliance)\n*           > LoRaWAN Remote Multicast Setup Specification v1.0.0 (Lora Alliance)\n*\n* McClassCSessionReq payload:\n*          | McGroupIDHeader  | SessionTime     | SessionTimeOut    | DLFrequ   | DR        | \n*          | 1 byte           | 4 bytes         | 1 byte            | 3 bytes   | 1 byte    |\n*\n* McClassCSessionReq command CID: 0x04\n*\n* Information:\n*           - inputs:   McGroupID           \n*                       SessionTime (Y,M,D,H,M,S)              \n*                       TimeOut\n*                       DLFreq\n*                       DR\n*           - outputs:  McClassCSessionReq\n*                       Session Time (date format)\n*                       SessionTimeOut (date format)\n*                                          \n*/\n\n//  ## Date calculation\n// GPS origin\nvar Origin = new Date('1980-01-06 00:00:00');\n// Desired date\nvar Desired_date = Date.parse(msg.payload.SessionTime_date);        // Y, M, D // \"parse\" turns the date into the number of ms passed since 1970-01-01.\nvar Desired_time = Date.parse(msg.payload.SessionTime_time);        // H, M\n\n// Difference calculation\nvar offset_time = Date.parse('1970-01-01 00:00:00');\nvar Desired = Desired_date + Desired_time - offset_time - Origin;   // time ( = hours and minuts) is set with an offset of 1970-01-01. So, I take the offset away.\nDesired=Desired+7200000;    // 2 hours are added to synch with our time (UTC+01). Added twice because there are a Date(Y,M,D) setup AND a time (H,M) setup.\nvar Diff = Desired/1000;      // difference in seconds\n\n// RFU (multiple use)\nvar RFU = '0';\n\n\n// ## McClassCSessionReq definition -------------------------------------------------------------\n// McGroupIDHeader (1 byte)\nvar McGroupID = msg.payload.McGroupID;                                              // To set ! (0,1,2 or 3)\nvar McGroupIDHeader = Buffer.from(RFU + McGroupID.toString(10), 'hex');\n\n// Session Time (4 bytes)\nvar SessionTime = Diff.toString(16);       // hex to string conversion\nvar SessionTime_le = SessionTime[6]        // little endian conversion\n                    + SessionTime[7]\n                    + SessionTime[4]\n                    + SessionTime[5]\n                    + SessionTime[2]\n                    + SessionTime[3]\n                    + SessionTime[0]\n                    + SessionTime[1];\nSessionTime_le = Buffer.from(SessionTime_le, 'hex');\n\n// SessionTimeOut \nvar TimeOut_r = msg.payload.TimeOut;                                                     // To set ! (0 --> 15)\nvar TimeOut = parseInt(TimeOut_r,10);   \nvar TimeOut_hex = parseInt(TimeOut.toString(16), 16);\nvar TimeOutSec = 2**TimeOut; // 2^TimeOut\nvar SessionTimeOut = Buffer.from(RFU + TimeOut_hex.toString(16), 'hex');\n\n// DLFreq (3 bytes)\nvar freq_r = msg.payload.DLFreq;\nvar freq = parseInt(freq_r,10);                                               // To set ! \nvar freq_hex = parseInt((freq/100).toString(16), 16);       // dec to hex conversion\nvar freq_hex_str = freq_hex.toString(16);                   // hex to string conversion\nvar freq_hex_str_le = freq_hex_str[4]                       // little endian conversion\n                    + freq_hex_str[5]\n                    + freq_hex_str[2]\n                    + freq_hex_str[3]\n                    + freq_hex_str[0]\n                    + freq_hex_str[1];\nfreq_hex_str_le = Buffer.from(freq_hex_str_le, 'hex');\n\n// DR (1 byte)\nvar DR_r = msg.payload.DR;                                                         // To set ! \nvar DR = parseInt(DR_r,10);\nvar DR_hex = parseInt(DR.toString(16), 16);                         // dec to hex conversion\nvar DR_hex_str = Buffer.from('0' + DR_hex.toString(16), 'hex');     // hex to string conversion\nDR_hex_str = Buffer.from(DR_hex_str, 'hex');\n\n// McClassCSessionReq\nvar Command_04 = Buffer.from('04', 'hex');\n// var McClassCSessionReq = Command + McGroupIDHeader + SessionTime_le + SessionTimeOut + freq_hex_str_le + DR_hex_str;\n\nvar McClassCSessionReq = Buffer.concat([\n                        Command_04,\n                        McGroupIDHeader,\n                        SessionTime_le,\n                        SessionTimeOut,\n                        freq_hex_str_le,\n                        DR_hex_str                        \n                        ]);\n                        \n                        \n\n\n\n\nmsg.desiredtime = Diff;\nmsg.McClassCSessionReq_command = McClassCSessionReq.toString('hex');\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1020,
        "wires": [
            [
                "eed3a3edb1bf1169"
            ]
        ]
    },
    {
        "id": "eed3a3edb1bf1169",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "5ddbf59639995318",
        "order": 2,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "McClassCSessionReq command",
        "format": "{{msg.McClassCSessionReq_command}}",
        "layout": "col-center",
        "className": "",
        "x": 620,
        "y": 1020,
        "wires": []
    },
    {
        "id": "361ecef1011a6a88",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "87ee573668ee2369",
        "order": 15,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "McAddr ( = DevAddr of the multicast group)",
        "format": "{{msg.McAddrBE}}",
        "layout": "row-spread",
        "className": "",
        "x": 1330,
        "y": 460,
        "wires": []
    },
    {
        "id": "d5b4f932dc878da9",
        "type": "mqtt out",
        "z": "b3733736db06bf09",
        "name": "MQTT Publisher",
        "topic": "",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6f92933c2c1df033",
        "x": 500,
        "y": 1520,
        "wires": []
    },
    {
        "id": "cc60ce25e047f729",
        "type": "function",
        "z": "b3733736db06bf09",
        "name": "Downlink",
        "func": "\nvar topic_actility = \"mqtt/things/\" + deveui + \"/downlink\";  \n\nvar network = global.get('network');\nvar gateway = global.get('gateway');\nvar application_id_ttn = global.get('application_id_ttn');\nvar device_id_ttn = global.get('device_id_ttn');\nvar topic_ttn_downlink_device = \"v3/\" + application_id_ttn + \"/devices/\" + device_id_ttn + \"/down/replace\";  \nvar topic_ttn_downlink_multicast = \"v3/\" + application_id_ttn + \"/devices/\" + device_id_ttn + \"/down/replace\";\n\n\n\n// McGroupIDHeader (1 byte)\nvar command = hexToBase64(msg.payload.thepayload);   \nvar deveui = msg.payload.deveui;\nvar port = msg.payload.port;\nvar multicast = msg.payload.multicast;\n\n\nfunction hexToBase64(hexString) {\n  // Conversion de la chaîne hexadécimale en un tableau d'octets\n  const bytes = Buffer.from(hexString, 'hex');\n\n  // Conversion des octets en base64\n  const base64String = bytes.toString('base64');\n\n  return base64String;\n}\n\n\n\n\n\n\n\nif (network == \"ttn\"){\n    if (multicast == false){\n       /**** Downlink to a device ***/\n        msg = \n        {\n            topic : topic_ttn_downlink_device,\n            \n            payload : {   \n                'downlinks': [{\n                    \"f_port\": port,\n                \t\"frm_payload\": command,\n                \t\"priority\": \"NORMAL\"\n                }]\n            }\n        }  \n    }\n    else{\n        /**** Downlink to a Multicast a Group ***/\n         msg = \n        {\n            topic : topic_ttn_downlink_multicast,\n            \n            payload : {\n                \"downlinks\": [\n                    {\n                        \"f_port\": port,\n                        \"frm_payload\": command,\n                        \"priority\": \"NORMAL\",\n                        \"class_b_c\": {\n                            \"gateways\": [\n                                {\n                                    \"gateway_ids\": {\n                                        \"gateway_id\": gateway\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n\nif (network == \"actility\"){\n      msg = \n      {\n        payload : {\n            \"DevEUI_downlink\": {\n     \t\t\"DevEUI\": deveui,\n     \t\t\"FPort\": port,\n     \t\t\"payload_hex\": command,\n    \t\t\"Confirmed\": \"0\", \t\t\n    \t\t\"FlushDownlinkQueue\": \"1\"    \n\t        }\n        }\n      }\n}\n\nreturn msg;\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1520,
        "wires": [
            [
                "d5b4f932dc878da9"
            ]
        ]
    },
    {
        "id": "0dadbccb571a7c4e",
        "type": "ui_form",
        "z": "b3733736db06bf09",
        "name": "Downlink",
        "label": "",
        "group": "5c1b38e3407d4958",
        "order": 4,
        "width": 8,
        "height": 1,
        "options": [
            {
                "label": "Port",
                "value": "port",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Payload",
                "value": "thepayload",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Send data to a Multicast group",
                "value": "multicast",
                "type": "checkbox",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "port": "",
            "thepayload": "",
            "multicast": false
        },
        "payload": "",
        "submit": "SEND",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 100,
        "y": 1520,
        "wires": [
            [
                "cc60ce25e047f729",
                "77c54b9f40987cce"
            ]
        ]
    },
    {
        "id": "330a875990d59ea1",
        "type": "comment",
        "z": "b3733736db06bf09",
        "name": "Downlink",
        "info": "",
        "x": 100,
        "y": 1480,
        "wires": []
    },
    {
        "id": "6c1274b29ffaa5f5",
        "type": "mqtt in",
        "z": "b3733736db06bf09",
        "name": "MQTT Subscriber",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "6f92933c2c1df033",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 420,
        "y": 1160,
        "wires": [
            [
                "c940ef2e1fa58797",
                "2a00be80658111de",
                "d533f1a64f383421",
                "2969ee79f36586ec",
                "a69e977fb70cd932"
            ]
        ]
    },
    {
        "id": "9216fd2541332eb3",
        "type": "comment",
        "z": "b3733736db06bf09",
        "name": "Uplink",
        "info": "",
        "x": 90,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c940ef2e1fa58797",
        "type": "function",
        "z": "b3733736db06bf09",
        "name": "Uplink analyser",
        "func": "/*\n* Title:    Multicast - Uplink analyzer\n* Autor:    Antoine AUGAGNEUR\n* Date:     march, 2022\n*\n*/\n\n\nfunction base64ToHex(base64String) {\n  // Conversion de la chaîne Base64 en un objet Buffer\n  const buffer = Buffer.from(base64String, 'base64');\n\n  // Conversion du buffer en une chaîne hexadécimale\n  const hexString = buffer.toString('hex');\n\n  return hexString;\n}\n\n\nvar upport = msg.payload.uplink_message.f_port;                     \nvar message = base64ToHex(msg.payload.uplink_message.frm_payload);              \nmsg.payload.uplink_message.frm_payload = base64ToHex(msg.payload.uplink_message.frm_payload);  \n\n\n\n// Multicast command analysis\nif (upport == \"200\"){\n    \n    message = message.toString('hex');\n\n    if (message[1] == \"0\"){\n        msg.commandtype = \"PackageVersionAns \";\n        msg.analysis = \"Pack.ID: \" + message[2] + message[3] + \" / \" + \"Pack.Ver: \" + message[4] + message[5];\n    }\n    else if(message[1] == \"1\"){\n        msg.commandtype = \"McGroupStatusAns\";\n        var buf = \"--\";\n        if (message.length > 4){buf = message[3];}\n        if (message.length > 15){buf += \"-\" + message[15];}\n        if (message.length > 27){buf += \"-\" + message[27];}\n        if (message.length > 38){buf += \"-\" + message[38];}\n        msg.analysis = \"Nb.Group: \" + message[2] + \" / \" + \"Group defined: \" + buf;\n    }\n    else if(message[1] == \"2\"){\n        msg.commandtype = \"McGroupSetupAns \";\n        var grp = parseInt(message[3].toString(16),16);\n        if (grp>3){ // bit IDerror == 1\n            msg.analysis = \"Setup group \" + grp-4 + \" aborted\";\n        }\n        else{\n            msg.analysis = \"Setup group \" + grp + \" successful\";\n        }\n    }\n    else if(message[1] == \"3\"){\n        msg.commandtype = \"McGroupDeleteAns \";\n        var grpb = parseInt(message[3].toString(16),16);\n        if (grpb>3){ // bit IDerror == 1\n            msg.analysis = \"Delete group \" + grpb-4 + \" failed\";\n        }\n        else{\n            msg.analysis = \"Delete group \" + grpb + \" successful\";\n        }\n    }\n    else if(message[1] == \"4\"){\n        msg.commandtype = \"McClassCSessionAns \";\n        var grpc = parseInt(message[3].toString(16),16);\n        if(grpc>10){\n            msg.analysis = \"Request aborted\";\n        }\n        else{\n            //var tps = message[8]+message[9]+message[6]+message[7]+message[4]+message[5];\n            //var tps_dec =  parseInt(message[1].toString(16),16); // sec\n            msg.analysis = \"C session setup group \" +  message[3];\n        }\n    }\n\n    else{\n        msg.commandtype = \"...\";\n        msg.analysis = \"...\";\n    }\n    \n}\nelse{\n    msg.commandtype = \"...\";\n    msg.analysis = \"...\";\n}\n\n\nreturn msg;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1340,
        "wires": [
            [
                "975e580141320057",
                "10fde859b125a5b7",
                "2969ee79f36586ec"
            ]
        ]
    },
    {
        "id": "2a00be80658111de",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "4eea49ec384dea02",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Port",
        "format": "{{payload.uplink_message.f_port}}",
        "layout": "row-spread",
        "className": "",
        "x": 910,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d533f1a64f383421",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "4eea49ec384dea02",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Fcnt",
        "format": "{{payload.uplink_message.f_cnt}}",
        "layout": "row-spread",
        "className": "",
        "x": 910,
        "y": 1180,
        "wires": []
    },
    {
        "id": "975e580141320057",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "4eea49ec384dea02",
        "order": 2,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "Multicast Command type",
        "format": "{{msg.commandtype}}",
        "layout": "col-center",
        "className": "",
        "x": 970,
        "y": 1320,
        "wires": []
    },
    {
        "id": "10fde859b125a5b7",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "4eea49ec384dea02",
        "order": 5,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "Multicast Command analysis",
        "format": "{{msg.analysis}}",
        "layout": "col-center",
        "className": "",
        "x": 980,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2969ee79f36586ec",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "4eea49ec384dea02",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Payload",
        "format": "{{payload.uplink_message.frm_payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 920,
        "y": 1220,
        "wires": []
    },
    {
        "id": "d0e5d5d4339ef4b1",
        "type": "comment",
        "z": "b3733736db06bf09",
        "name": "PackageVersionReq  command (0x00)",
        "info": "",
        "x": 190,
        "y": 520,
        "wires": []
    },
    {
        "id": "8b9cf68acf3f6c06",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "d": true,
        "group": "470ded09e55a0e90",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Command",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 450,
        "y": 560,
        "wires": []
    },
    {
        "id": "717f2b8d4c93b8e5",
        "type": "ui_template",
        "z": "b3733736db06bf09",
        "d": true,
        "group": "470ded09e55a0e90",
        "name": "Info",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<!DOCTYPE html>\n<html>\n<!--<head>-->\n<!--\t<title>Hello</title>-->\n\n<!--\t<h1>Hello World</h1>-->\n<!--</head>-->\n<body>\n    \n<p><em>Payload is fixed</em></p>\n\n</body>\n</html>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 90,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "491623a8d75ddfd1",
        "type": "inject",
        "z": "b3733736db06bf09",
        "name": "00",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "00",
        "payloadType": "str",
        "x": 250,
        "y": 560,
        "wires": [
            [
                "8b9cf68acf3f6c06"
            ]
        ]
    },
    {
        "id": "0b136e41783f7325",
        "type": "comment",
        "z": "b3733736db06bf09",
        "name": "McGroupStatusReq  command (0x01)",
        "info": "",
        "x": 190,
        "y": 620,
        "wires": []
    },
    {
        "id": "b1c0b511c09155e1",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "d": true,
        "group": "a06271e5d40eb8a7",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Command",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 450,
        "y": 660,
        "wires": []
    },
    {
        "id": "fcc874e275d1b421",
        "type": "comment",
        "z": "b3733736db06bf09",
        "name": "McGroupDeleteReq command (0x03)",
        "info": "",
        "x": 190,
        "y": 720,
        "wires": []
    },
    {
        "id": "2fc310a7b7cb1950",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "d": true,
        "group": "3c51a677b2a33fac",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Command",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 450,
        "y": 760,
        "wires": []
    },
    {
        "id": "88ae63b5978d6213",
        "type": "ui_dropdown",
        "z": "b3733736db06bf09",
        "d": true,
        "name": "",
        "label": "Group",
        "tooltip": "",
        "place": "Select option",
        "group": "a06271e5d40eb8a7",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "0",
                "value": "0101",
                "type": "str"
            },
            {
                "label": "1",
                "value": "0102",
                "type": "str"
            },
            {
                "label": "0-1",
                "value": "0103",
                "type": "str"
            },
            {
                "label": "2",
                "value": "0104",
                "type": "str"
            },
            {
                "label": "0-2",
                "value": "0105",
                "type": "str"
            },
            {
                "label": "1-2",
                "value": "0106",
                "type": "str"
            },
            {
                "label": "0-1-2",
                "value": "0107",
                "type": "str"
            },
            {
                "label": "3",
                "value": "0108",
                "type": "str"
            },
            {
                "label": "0-3",
                "value": "0109",
                "type": "str"
            },
            {
                "label": "1-3",
                "value": "010A",
                "type": "str"
            },
            {
                "label": "0-1-3",
                "value": "010B",
                "type": "str"
            },
            {
                "label": "2-3",
                "value": "010C",
                "type": "str"
            },
            {
                "label": "0-2-3",
                "value": "010D",
                "type": "str"
            },
            {
                "label": "1-2-3",
                "value": "010E",
                "type": "str"
            },
            {
                "label": "0-1-2-3",
                "value": "010F",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 90,
        "y": 660,
        "wires": [
            [
                "b1c0b511c09155e1"
            ]
        ]
    },
    {
        "id": "d3c0d9ad86d88078",
        "type": "ui_dropdown",
        "z": "b3733736db06bf09",
        "d": true,
        "name": "",
        "label": "Group",
        "tooltip": "",
        "place": "Select option",
        "group": "3c51a677b2a33fac",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "0",
                "value": "0300",
                "type": "str"
            },
            {
                "label": "1",
                "value": "0301",
                "type": "str"
            },
            {
                "label": "2",
                "value": "0302",
                "type": "str"
            },
            {
                "label": "3",
                "value": "0303",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 90,
        "y": 760,
        "wires": [
            [
                "2fc310a7b7cb1950"
            ]
        ]
    },
    {
        "id": "ccf82310fc068f5a",
        "type": "inject",
        "z": "b3733736db06bf09",
        "name": "RAZ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 930,
        "y": 280,
        "wires": [
            [
                "7fbe5c3a9ce0d312",
                "9478f3ec4eb613e4",
                "f550a874eb91994d",
                "280c8073fa00bb80",
                "9e876f4e13076d01",
                "361ecef1011a6a88",
                "85db35f79b2e2f14",
                "17b020efe49f4899",
                "0bc5258602328aaf"
            ]
        ]
    },
    {
        "id": "a69e977fb70cd932",
        "type": "ui_text",
        "z": "b3733736db06bf09",
        "group": "4eea49ec384dea02",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Device ID",
        "format": "{{payload.end_device_ids.device_id}}",
        "layout": "row-spread",
        "className": "",
        "x": 920,
        "y": 1100,
        "wires": []
    },
    {
        "id": "10d605dda8f8739c",
        "type": "inject",
        "z": "b3733736db06bf09",
        "name": "RAZ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 710,
        "y": 1240,
        "wires": [
            [
                "2a00be80658111de",
                "d533f1a64f383421",
                "975e580141320057",
                "10fde859b125a5b7",
                "a69e977fb70cd932"
            ]
        ]
    },
    {
        "id": "068c965ef4592d66",
        "type": "link in",
        "z": "b3733736db06bf09",
        "name": "MQTT configuration in",
        "links": [
            "728e4479a2eccdd2"
        ],
        "x": 235,
        "y": 1160,
        "wires": [
            [
                "6c1274b29ffaa5f5"
            ]
        ]
    },
    {
        "id": "77c54b9f40987cce",
        "type": "function",
        "z": "b3733736db06bf09",
        "name": "Persistance",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 1560,
        "wires": [
            [
                "0dadbccb571a7c4e"
            ]
        ]
    },
    {
        "id": "87ee573668ee2369",
        "type": "ui_group",
        "name": "Multicast Session Generator",
        "tab": "121f9e88659f1b47",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c031fbdc2f5341a9",
        "type": "ui_group",
        "name": "McGroupSetupReq",
        "tab": "121f9e88659f1b47",
        "order": 5,
        "disp": true,
        "width": 11,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5ddbf59639995318",
        "type": "ui_group",
        "name": "McClassCSessionReq",
        "tab": "121f9e88659f1b47",
        "order": 6,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6f92933c2c1df033",
        "type": "mqtt-broker",
        "name": "Broker",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5c1b38e3407d4958",
        "type": "ui_group",
        "name": "Downlink",
        "tab": "121f9e88659f1b47",
        "order": 7,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4eea49ec384dea02",
        "type": "ui_group",
        "name": "Last Uplink",
        "tab": "121f9e88659f1b47",
        "order": 8,
        "disp": true,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "470ded09e55a0e90",
        "type": "ui_group",
        "name": "PackageVersionReq",
        "tab": "121f9e88659f1b47",
        "order": 2,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a06271e5d40eb8a7",
        "type": "ui_group",
        "name": "McGroupStatusReq",
        "tab": "121f9e88659f1b47",
        "order": 3,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3c51a677b2a33fac",
        "type": "ui_group",
        "name": "McGroupDeleteReq",
        "tab": "121f9e88659f1b47",
        "order": 4,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "121f9e88659f1b47",
        "type": "ui_tab",
        "name": "Multicast",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    }
]